name: Deploy to AKS

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'sql_scripts/**'
      - 'rules/**'
      - '*.py'
      - 'requirements.txt'
      - 'config.yaml'
      - 'k8s/**'
      - '.github/workflows/aks-deploy.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'sql_scripts/**'
      - 'rules/**'
      - '*.py'
      - 'requirements.txt'
      - 'config.yaml'
      - 'k8s/**'
      - '.github/workflows/aks-deploy.yml'

env:
  AZURE_CONTAINER_REGISTRY: your-acr-name
  REGISTRY_LOGIN_SERVER: your-acr-name.azurecr.io
  RESOURCE_GROUP: your-resource-group
  CLUSTER_NAME: your-cluster-name
  NAMESPACE: sql-scanner

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt

    - name: Run SQL Scanner
      run: |
        source venv/bin/activate
        python sql_scanner.py -s sql_scripts -r rules --report-format html json

    - name: Upload scan reports
      uses: actions/upload-artifact@v2
      with:
        name: scan-reports
        path: reports/

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v2

    - name: Azure Container Registry Login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push container image
      run: |
        docker build -t ${{ env.REGISTRY_LOGIN_SERVER }}/sql-scanner:${{ github.sha }} .
        docker push ${{ env.REGISTRY_LOGIN_SERVER }}/sql-scanner:${{ github.sha }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v1

    - name: Get AKS credentials
      uses: azure/aks-set-context@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create secrets
      run: |
        kubectl create secret generic sql-scanner-secrets \
          --from-literal=PYTHON_VERSION=3.9 \
          --from-literal=VENV_PATH=venv \
          -n ${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        kubectl create secret docker-registry sql-scanner-registry \
          --docker-server=${{ env.REGISTRY_LOGIN_SERVER }} \
          --docker-username=${{ secrets.REGISTRY_USERNAME }} \
          --docker-password=${{ secrets.REGISTRY_PASSWORD }} \
          -n ${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Create configmaps
      run: |
        kubectl create configmap sql-scanner-config \
          --from-file=config.yaml \
          -n ${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        kubectl create configmap sql-scripts \
          --from-dir=sql_scripts \
          -n ${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        kubectl create configmap rules \
          --from-dir=rules \
          -n ${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s/deployment.yaml -n ${{ env.NAMESPACE }}
        kubectl apply -f k8s/pvc.yaml -n ${{ env.NAMESPACE }}
        kubectl wait --for=condition=complete job/sql-scanner -n ${{ env.NAMESPACE }} --timeout=300s
        kubectl logs job/sql-scanner -n ${{ env.NAMESPACE }}

  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v2

    - name: Install kubectl
      uses: azure/setup-kubectl@v1

    - name: Get AKS credentials
      uses: azure/aks-set-context@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    - name: Cleanup resources
      run: |
        kubectl delete job sql-scanner -n ${{ env.NAMESPACE }} --ignore-not-found
        kubectl delete pvc sql-scripts-pvc rules-pvc reports-pvc -n ${{ env.NAMESPACE }} --ignore-not-found 