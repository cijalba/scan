pipeline {
    agent any

    environment {
        PYTHON_VERSION = '3.9'
        VENV_PATH = 'venv'
        AZURE_NAMESPACE = 'sql-scanner'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python') {
            steps {
                sh """
                    python${PYTHON_VERSION} -m venv ${VENV_PATH}
                    . ${VENV_PATH}/bin/activate
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt
                """
            }
        }

        stage('Run SQL Scanner') {
            steps {
                sh """
                    . ${VENV_PATH}/bin/activate
                    python sql_scanner.py -s sql_scripts -r rules --report-format html json
                """
            }
        }

        stage('Deploy to AKS') {
            when {
                branch 'master' || branch 'develop'
            }
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'azure-credentials', usernameVariable: 'AZURE_CLIENT_ID', passwordVariable: 'AZURE_CLIENT_SECRET'),
                    usernamePassword(credentialsId: 'azure-tenant', usernameVariable: 'AZURE_TENANT_ID', passwordVariable: 'AZURE_TENANT_ID'),
                    usernamePassword(credentialsId: 'azure-acr', usernameVariable: 'AZURE_ACR_USERNAME', passwordVariable: 'AZURE_ACR_PASSWORD')
                ]) {
                    sh """
                        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                        az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_AKS_CLUSTER
                        
                        kubectl create namespace $AZURE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
                        
                        kubectl create secret generic sql-scanner-secrets \
                            --from-literal=PYTHON_VERSION=$PYTHON_VERSION \
                            --from-literal=VENV_PATH=$VENV_PATH \
                            -n $AZURE_NAMESPACE \
                            --dry-run=client -o yaml | kubectl apply -f -
                        
                        kubectl create secret docker-registry sql-scanner-registry \
                            --docker-server=$AZURE_ACR_LOGIN_SERVER \
                            --docker-username=$AZURE_ACR_USERNAME \
                            --docker-password=$AZURE_ACR_PASSWORD \
                            -n $AZURE_NAMESPACE \
                            --dry-run=client -o yaml | kubectl apply -f -
                        
                        kubectl create configmap sql-scanner-config \
                            --from-file=config.yaml \
                            -n $AZURE_NAMESPACE \
                            --dry-run=client -o yaml | kubectl apply -f -
                        
                        kubectl create configmap sql-scripts \
                            --from-dir=sql_scripts \
                            -n $AZURE_NAMESPACE \
                            --dry-run=client -o yaml | kubectl apply -f -
                        
                        kubectl create configmap rules \
                            --from-dir=rules \
                            -n $AZURE_NAMESPACE \
                            --dry-run=client -o yaml | kubectl apply -f -
                        
                        kubectl apply -f k8s/deployment.yaml -n $AZURE_NAMESPACE
                        kubectl apply -f k8s/pvc.yaml -n $AZURE_NAMESPACE
                        kubectl wait --for=condition=complete job/sql-scanner -n $AZURE_NAMESPACE --timeout=300s
                        kubectl logs job/sql-scanner -n $AZURE_NAMESPACE
                    """
                }
            }
        }

        stage('Archive Reports') {
            steps {
                archiveArtifacts artifacts: 'reports/**', fingerprint: true
            }
        }
    }

    post {
        always {
            withCredentials([
                usernamePassword(credentialsId: 'azure-credentials', usernameVariable: 'AZURE_CLIENT_ID', passwordVariable: 'AZURE_CLIENT_SECRET'),
                usernamePassword(credentialsId: 'azure-tenant', usernameVariable: 'AZURE_TENANT_ID', passwordVariable: 'AZURE_TENANT_ID')
            ]) {
                sh """
                    az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                    az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_AKS_CLUSTER
                    kubectl delete job sql-scanner -n $AZURE_NAMESPACE --ignore-not-found
                    kubectl delete pvc sql-scripts-pvc rules-pvc reports-pvc -n $AZURE_NAMESPACE --ignore-not-found
                """
            }
            cleanWs()
        }
    }
} 